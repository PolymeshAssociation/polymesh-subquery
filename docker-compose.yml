version: '3'

services:
  postgres:
    image: postgres:12-alpine
    ports:
      - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  subquery-node:
    build: ./
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    depends_on:
      'postgres':
        condition: service_healthy
    restart: always
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      START_BLOCK: 1
      # NO_NATIVE_GRAPHQL_DATA: 'TRUE' # Setting this value only processes tooling specific handlers. Native subquery entities are ignored.
      # Polymesh-local
      NETWORK_ENDPOINT: ws://host.docker.internal:9944
      # Setting NETWORK_HTTP_ENDPOINT will allow dynamic lookup of NETWORK_CHAIN_ID
      NETWORK_HTTP_ENDPOINT: 'http://host.docker.internal:9933'
      # Staging
      # NETWORK_ENDPOINT: wss://staging-rpc.polymesh.live
      # NETWORK_CHAIN_ID: '0x3c3183f6d701500766ff7d147b79c4f10014a095eaaa98e960dcef6b3ead50ee'
      # Testnet
      # NETWORK_ENDPOINT: wss://testnet-rpc.polymesh.live
      # NETWORK_CHAIN_ID: '0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6'
      # Mainnet
      # NETWORK_ENDPOINT: wss://mainnet-rpc.polymesh.network
      # NETWORK_CHAIN_ID: '0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063'
    command:
      - -f=/app # Path of the project
      - --batch-size=100 # Batch size of blocks to fetch in one round
      # - --scale-batch-size # scale batch size based on memory usage. To know more about the process - https://github.com/subquery/subql/blob/c9bc9733deef726f78fa48387e74e52f8d6ca8d2/packages/node/src/indexer/fetch.service.ts#L88
      # - --timeout=3600 # Timeout for indexer sandbox to execute the mapping functions (in seconds)
      # - --local # This is now deprecated
      - --db-schema=public # Once tooling-gql is deprecated, we can change the schema name if required
      # - --force-clean # To remove all tables and schema before starting the app
      - --timestamp-field # Enables created_at and updated_at in schema
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://subquery-node:3000/ready']
      interval: 3s
      timeout: 5s
      retries: 10

  graphql-engine:
    image: onfinality/subql-query:v1.0.0
    ports:
      - 3001:3000
    depends_on:
      'postgres':
        condition: service_healthy
      'subquery-node':
        condition: service_healthy
    restart: always
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
    command:
      - --name=public
      - --playground

volumes:
  db-data:
